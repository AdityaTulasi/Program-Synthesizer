from commonglobals import \
    get_new_doc, \
    get_named_entities, \
    render_pos_html, \
    get_noun_chunk


class NlpContext:
    def __init__(self, phrase, doc_type='textacy'):
        """
        This class isolates the internals getting implemented in any NLP library
        :type phrase: str
        """
        assert isinstance(phrase, basestring)
        self.doc = get_new_doc(phrase, doc_type)
        self.phrase = phrase

    @property
    def tokens(self):
        """
        :return: Returns the individual tokens for the parsed phrase
        """
        return [token for token in self.doc]

    @property
    def compressed_tree(self):
        """
        It returns a compact version of the parsed tree.
        :return: Array of tuples which contains relationship info between the individual tokens and
        their corresponding head tokens.
        """
        return [(token.pos_, token.text, token.dep_, token.head.text, token.head.pos_) for token in self.doc]

    def print_tree_on_console(self):
        for printable in self.compressed_tree:
            print printable

    def get_html_visualization_of_trees(self, nlp_contexts):
        """
        It returns the html generated by having visualization of trees
        :param nlp_contexts: This is the list of other nlp contexts which have to visualized together
        :return: html code generated which shows the appropriate visualization of all the trees
        """
        assert isinstance(nlp_contexts, list)
        for context in nlp_contexts:
            assert isinstance(context, NlpContext)

        list_of_docs = [self.doc]
        list_of_docs.extend(map(lambda x: x.doc, nlp_contexts))
        return render_pos_html(list_of_docs)

    @property
    def named_entities(self):
        return get_named_entities(self.doc)

    @property
    def noun_chunk(self):
        return get_noun_chunk(self.doc)